---
title: "Imputation"
---

Pull the FVS output and organize the data. 




```{r}
#| message: false
#| warning: false

library(tidyverse, quietly = T)
library(esquisse)
library(yaImpute)
library(RSQLite)
library(vegan)
library(randomForest)
library(RSQLite)

options(scipen = 999)
```

```{r}
#| message: false

# Pulling from my new interim save point
con <- dbConnect(RSQLite::SQLite(), "./attempt_032524.db")
imp_data <- dbGetQuery(con, "select * from imp_data")
zimp_data <- dbGetQuery(con, "select * from regen_only_imp_data")
plots <- dbGetQuery(con, "select * from fvs_plotinit_plot")
plants_ref <- dbGetQuery(con, "select * from plants_ref")
dbDisconnect(con)
rm(con)

pred_topo <- plots |> select(
  STANDPLOT_CN, ELEVFT, SLOPE, ASPECT
)
pred_Kral <- imp_data |> select(
  STANDPLOT_CN, CC, BA, SDI, FPAG
)

response <- imp_data |> select(
  -c(CC, BA, SDI, FPAG)
)

predictors <- left_join(pred_Kral, pred_topo)|> 
  relocate(FPAG, .after = STANDPLOT_CN)


# Filtering for only CDS6
cds6 <- predictors |> filter(
  FPAG == "CDS6") |> 
  select(-c(FPAG))


cds_cns <- cds6 |> select(STANDPLOT_CN)
zcds_cns <- zimp_data |> filter(FPAG == "CDS6") |> select(STANDPLOT_CN)
zcds6 <- left_join(zcds_cns, cds6, by ="STANDPLOT_CN")

# Joining the x and y
imp_2 <- left_join(cds_cns, response, by = "STANDPLOT_CN")
# Making CN into rownames
imp_2 <- column_to_rownames(imp_2, "STANDPLOT_CN")
# making sure it's not all zero
imp_2 <- imp_2[, !colSums(imp_2) == 0]

imp_2 <- left_join(cds6, response)
zimp_2 <- left_join(zcds6, response)


# form some test data, y's are defined only for reference observations.
# refs  =  sample(x  =  rownames(imp_2), size  =  (nrow(imp_2)/4)*3)
refs <- rownames(imp_2[1:(round(.75*nrow(imp_2))), ])
# zrefs  =  sample(x  =  rownames(zimp_2), size  =  (nrow(zimp_2)/4)*3)
zrefs <- rownames(zimp_2[1:(round(.75*nrow(zimp_2))), ])

# x is every row and column of predictor variables.
# CC, BA, SDI, ELEVFT, SLOPE, ASPECT
X_predictors1 <- imp_2 |> select(CC, BA, SDI)
X_predictors2 <- imp_2 |> select(CC, BA, SDI, ELEVFT, SLOPE, ASPECT)
zX_predictors1 <- zimp_2 |> select(CC, BA, SDI)
zX_predictors2 <- zimp_2 |> select(CC, BA, SDI, ELEVFT, SLOPE, ASPECT)

# y is all other columns, seedling tree densities. 
# row names are row numbers
# y <- imp_df[refs,3:36], this was the example code. 
Y_response <- imp_2[refs,] |> select(ends_with("TD")) 
Y_response <- Y_response[, order(colSums(-Y_response))]

zY_response <- zimp_2[zrefs,] |> select(ends_with("TD")) 
zY_response <- zY_response[, order(colSums(-zY_response))]

# remove zero columns
Y_response <- Y_response[, !colSums(Y_response) == 0]
zY_response <- zY_response[, !colSums(zY_response) == 0]
```


```{r}
k = 10

# build yai objects using
# most similar neighbor
msn_dist_3 <- yai(x = X_predictors1, y = Y_response, method = "msn", k = k)
# and mahalanobis
mal_dist_3 <- yai(x = X_predictors1, y = Y_response, method = "mahalanobis", k = k)

# For the expanded list of predictors
msn_dist_6 <- yai(x = X_predictors2, y = Y_response, method = "msn", k = k)
# and mahalanobis
mal_dist_6 <- yai(x = X_predictors2, y = Y_response, method = "mahalanobis", k = k)

# Small predictors but standarcized
zmsn_dist_3 <- yai(x = zX_predictors1, y = zY_response, method = "msn", k = k)
# and mahalanobis
zmal_dist_3 <- yai(x = zX_predictors1, y = zY_response, method = "mahalanobis", k = k)

# Standardized expanded
zmsn_dist_6 <- yai(x = zX_predictors2, y = zY_response, method = "msn", k = k)
# and mahalanobis
zmal_dist_6 <- yai(x = zX_predictors2, y = zY_response, method = "mahalanobis", k = k)


imputed_msn_dist_3 <- impute(msn_dist_3)
# imputed_mal_dist_1 <- impute(mal_dist_1)
imputed_msn_dist_6 <- impute(msn_dist_6)
# imputed_mal_dist_2 <- impute(mal_dist_2)
imputed_zmsn_dist_3 <- impute(zmsn_dist_3)
# imputed_zmal_dist_1 <- impute(zmal_dist_1)
imputed_zmsn_dist_6 <- impute(zmsn_dist_6)
# imputed_zmal_dist_2 <- impute(zmal_dist_2)

names <- c('PSME_TD', 'PICO_TD', 'PIPO_TD', 'PRVI_TD', 'ABGR_TD', 'PREM_TD', 
           'PSME_TD.o', 'PICO_TD.o', 'PIPO_TD.o', 'PRVI_TD.o', 'ABGR_TD.o', 'PREM_TD.o')

imp_msn_dist_3 <- imputed_msn_dist_3[, names(imputed_msn_dist_3) %in% names] |> 
  filter(PSME_TD < 15000 & PSME_TD.o < 15000)
imp_msn_dist_6 <- imputed_msn_dist_6[, names(imputed_msn_dist_6) %in% names]|> 
  filter(PSME_TD < 15000 & PSME_TD.o < 15000)
zimp_msn_dist_3 <- imputed_zmsn_dist_3[, names(imputed_zmsn_dist_3) %in% names]|> 
  filter(PSME_TD < 15000 & PSME_TD.o < 15000)
zimp_msn_dist_6 <- imputed_zmsn_dist_6[, names(imputed_zmsn_dist_6) %in% names]|> 
  filter(PSME_TD < 15000 & PSME_TD.o < 15000)
```

```{r}
#| column: page
#| layout-ncol: 2
#| message: false
plot(imp_msn_dist_3)
plot(imp_msn_dist_6)
```

```{r}
#| column: page
#| layout-ncol: 2
#| message: false
plot(zimp_msn_dist_3)
plot(zimp_msn_dist_6)
```

```{r}
#| column: page
#| layout-ncol: 2
#| message: false
plot(imp_msn_dist_3)
plot(zimp_msn_dist_3)
```

```{r}
#| column: page
#| layout-ncol: 2
#| message: false
plot(imp_msn_dist_6)
plot(zimp_msn_dist_6)
```

